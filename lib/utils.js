"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packCollectibleData = exports.petAttributes = exports.heroAttributes = exports.defaultAttributes = exports.mockExtraAttributes = exports.toStringHex = exports.toNumberHex = exports.mockAttributes = exports.mockPetAttributes = exports.mockHeroAttributes = exports.createSignedBoostedKillMessage = exports.createSignedBoostedMergeMessage = exports.createSignedBoostedEmpowerMessage = exports.createSignedBoostedSendMessage = void 0;
const types_1 = require("./types");
const utils_1 = require("@prps/solidity/lib/utils");
const types_2 = require("@prps/solidity/lib/types");
const test_helpers_1 = require("@openzeppelin/test-helpers");
const eth_sig_util_1 = require("eth-sig-util");
exports.createSignedBoostedSendMessage = async (web3, { from, to, tokenId, nonce, timestamp, fuel, booster, isLegacySignature, verifyingContract, signer: { privateKey } }) => {
    var _a, _b, _c, _d;
    const typedData = {
        types: {
            EIP712Domain: types_2.EIP712Domain,
            BoostedSend: types_1.BoostedSend,
            BoosterFuel: types_2.BoosterFuel,
            BoosterPayload: types_2.BoosterPayload,
        },
        domain: utils_1.createEIP712Domain("Clash Of Streamers", verifyingContract),
        primaryType: "BoostedSend",
        message: {
            tag: types_1.BoostTag.Transfer,
            from,
            to,
            tokenId: tokenId.toString(),
            fuel: {
                dubi: ((_a = fuel === null || fuel === void 0 ? void 0 : fuel.dubi) !== null && _a !== void 0 ? _a : 0).toString(),
                unlockedPrps: ((_b = fuel === null || fuel === void 0 ? void 0 : fuel.unlockedPrps) !== null && _b !== void 0 ? _b : 0).toString(),
                lockedPrps: ((_c = fuel === null || fuel === void 0 ? void 0 : fuel.lockedPrps) !== null && _c !== void 0 ? _c : 0).toString(),
                intrinsicFuel: ((_d = fuel === null || fuel === void 0 ? void 0 : fuel.intrinsicFuel) !== null && _d !== void 0 ? _d : 0).toString(),
            },
            boosterPayload: {
                booster,
                timestamp: timestamp !== null && timestamp !== void 0 ? timestamp : await utils_1.blockchainTimestampWithOffset(web3, 0),
                nonce: nonce.toString(),
                isLegacySignature: (isLegacySignature || false),
            }
        }
    };
    return {
        message: typedData.message,
        signature: utils_1.signEIP712(typedData, { privateKey }),
        messageBytes: utils_1.getTypedMessageBytes(web3, typedData),
        messageHash: `0x${eth_sig_util_1.TypedDataUtils.sign(typedData).toString("hex")}`,
    };
};
exports.createSignedBoostedEmpowerMessage = async (web3, { funder, tokenId, amount, nonce, timestamp, fuel, booster, isLegacySignature, verifyingContract, signer: { privateKey } }) => {
    var _a, _b, _c, _d;
    const typedData = {
        types: {
            EIP712Domain: types_2.EIP712Domain,
            BoostedEmpower: types_1.BoostedEmpower,
            BoosterFuel: types_2.BoosterFuel,
            BoosterPayload: types_2.BoosterPayload,
        },
        domain: utils_1.createEIP712Domain("Clash Of Streamers", verifyingContract),
        primaryType: "BoostedEmpower",
        message: {
            tag: types_1.BoostTag.Empower,
            funder,
            tokenId: tokenId.toString(),
            amount: amount.toString(),
            fuel: {
                dubi: ((_a = fuel === null || fuel === void 0 ? void 0 : fuel.dubi) !== null && _a !== void 0 ? _a : 0).toString(),
                unlockedPrps: ((_b = fuel === null || fuel === void 0 ? void 0 : fuel.unlockedPrps) !== null && _b !== void 0 ? _b : 0).toString(),
                lockedPrps: ((_c = fuel === null || fuel === void 0 ? void 0 : fuel.lockedPrps) !== null && _c !== void 0 ? _c : 0).toString(),
                intrinsicFuel: ((_d = fuel === null || fuel === void 0 ? void 0 : fuel.intrinsicFuel) !== null && _d !== void 0 ? _d : 0).toString(),
            },
            boosterPayload: {
                booster,
                timestamp: timestamp !== null && timestamp !== void 0 ? timestamp : await utils_1.blockchainTimestampWithOffset(web3, 0),
                nonce: nonce.toString(),
                isLegacySignature: (isLegacySignature || false),
            }
        }
    };
    return {
        message: typedData.message,
        signature: utils_1.signEIP712(typedData, { privateKey }),
        messageBytes: utils_1.getTypedMessageBytes(web3, typedData),
        messageHash: `0x${eth_sig_util_1.TypedDataUtils.sign(typedData).toString("hex")}`,
    };
};
exports.createSignedBoostedMergeMessage = async (web3, { tokenIdSource, tokenIdTarget, nonce, timestamp, fuel, booster, isLegacySignature, verifyingContract, signer: { privateKey } }) => {
    var _a, _b, _c, _d;
    const typedData = {
        types: {
            EIP712Domain: types_2.EIP712Domain,
            BoostedMerge: types_1.BoostedMerge,
            BoosterFuel: types_2.BoosterFuel,
            BoosterPayload: types_2.BoosterPayload,
        },
        domain: utils_1.createEIP712Domain("Clash Of Streamers", verifyingContract),
        primaryType: "BoostedMerge",
        message: {
            tag: types_1.BoostTag.Merge,
            tokenIdSource: tokenIdSource.toString(),
            tokenIdTarget: tokenIdTarget.toString(),
            fuel: {
                dubi: ((_a = fuel === null || fuel === void 0 ? void 0 : fuel.dubi) !== null && _a !== void 0 ? _a : 0).toString(),
                unlockedPrps: ((_b = fuel === null || fuel === void 0 ? void 0 : fuel.unlockedPrps) !== null && _b !== void 0 ? _b : 0).toString(),
                lockedPrps: ((_c = fuel === null || fuel === void 0 ? void 0 : fuel.lockedPrps) !== null && _c !== void 0 ? _c : 0).toString(),
                intrinsicFuel: ((_d = fuel === null || fuel === void 0 ? void 0 : fuel.intrinsicFuel) !== null && _d !== void 0 ? _d : 0).toString(),
            },
            boosterPayload: {
                booster,
                timestamp: timestamp !== null && timestamp !== void 0 ? timestamp : await utils_1.blockchainTimestampWithOffset(web3, 0),
                nonce: nonce.toString(),
                isLegacySignature: (isLegacySignature || false),
            }
        }
    };
    return {
        message: typedData.message,
        signature: utils_1.signEIP712(typedData, { privateKey }),
        messageBytes: utils_1.getTypedMessageBytes(web3, typedData),
        messageHash: `0x${eth_sig_util_1.TypedDataUtils.sign(typedData).toString("hex")}`,
    };
};
exports.createSignedBoostedKillMessage = async (web3, { tokenId, nonce, timestamp, fuel, booster, isLegacySignature, verifyingContract, signer: { privateKey } }) => {
    var _a, _b, _c, _d;
    const typedData = {
        types: {
            EIP712Domain: types_2.EIP712Domain,
            BoostedKill: types_1.BoostedKill,
            BoosterFuel: types_2.BoosterFuel,
            BoosterPayload: types_2.BoosterPayload,
        },
        domain: utils_1.createEIP712Domain("Clash Of Streamers", verifyingContract),
        primaryType: "BoostedKill",
        message: {
            tag: types_1.BoostTag.Kill,
            tokenId: tokenId.toString(),
            fuel: {
                dubi: ((_a = fuel === null || fuel === void 0 ? void 0 : fuel.dubi) !== null && _a !== void 0 ? _a : 0).toString(),
                unlockedPrps: ((_b = fuel === null || fuel === void 0 ? void 0 : fuel.unlockedPrps) !== null && _b !== void 0 ? _b : 0).toString(),
                lockedPrps: ((_c = fuel === null || fuel === void 0 ? void 0 : fuel.lockedPrps) !== null && _c !== void 0 ? _c : 0).toString(),
                intrinsicFuel: ((_d = fuel === null || fuel === void 0 ? void 0 : fuel.intrinsicFuel) !== null && _d !== void 0 ? _d : 0).toString(),
            },
            boosterPayload: {
                booster,
                timestamp: timestamp !== null && timestamp !== void 0 ? timestamp : await utils_1.blockchainTimestampWithOffset(web3, 0),
                nonce: nonce.toString(),
                isLegacySignature: (isLegacySignature || false),
            }
        }
    };
    return {
        message: typedData.message,
        signature: utils_1.signEIP712(typedData, { privateKey }),
        messageBytes: utils_1.getTypedMessageBytes(web3, typedData),
        messageHash: `0x${eth_sig_util_1.TypedDataUtils.sign(typedData).toString("hex")}`,
    };
};
exports.mockHeroAttributes = (attributes) => ({ ...exports.heroAttributes, ...attributes });
exports.mockPetAttributes = (attributes) => ({ ...exports.petAttributes, ...attributes });
exports.mockAttributes = (attributes) => ({ ...exports.defaultAttributes, ...attributes });
exports.toNumberHex = (input) => `0x${input.toString(16).padStart(64, "0")}`;
exports.toStringHex = (input) => `0x${Buffer.from(input).toString("hex").padEnd(64, "0")}`;
exports.mockExtraAttributes = (attributes) => {
    const keys = [];
    const values = [];
    for (const [key, value] of Object.entries({ ...exports.defaultAttributes, ...attributes })) {
        keys.push(exports.toStringHex(key));
        values.push(typeof value === "string" ? exports.toStringHex(value) : exports.toNumberHex(value));
    }
    return {
        keys,
        values,
    };
};
exports.defaultAttributes = {
    level: 1,
    stars: 2,
    faction: 3,
    abilities: 1234,
    season: 9,
};
exports.heroAttributes = {
    ...exports.defaultAttributes,
    headIdAlias: "88",
    skinSlot: 1,
    skinDivision: 12,
    class: 3,
};
exports.petAttributes = {
    ...exports.defaultAttributes,
    headIdAlias: "123",
    shinyHue: 255,
};
exports.packCollectibleData = (contract, deployment, attributes) => {
    // We need to pack the attributes into a uint256
    const packedData = new test_helpers_1.BN(0);
    let offset = 0;
    // 24 bit headId
    packedData.ior(new test_helpers_1.BN(attributes.headIdAlias));
    offset += 24;
    // 96 bit empoweredDUBI
    packedData.ior(new test_helpers_1.BN(attributes.empoweredDUBI).shln(offset));
    offset += 96;
    // 32 bit season
    packedData.ior(new test_helpers_1.BN(attributes.season).shln(offset));
    offset += 32;
    // 32 bit abilities
    packedData.ior(new test_helpers_1.BN(attributes.abilities).shln(offset));
    offset += 32;
    // 8 bit stars
    packedData.ior(new test_helpers_1.BN(attributes.stars).shln(offset));
    offset += 8;
    // 8 bit level
    packedData.ior(new test_helpers_1.BN(attributes.level).shln(offset));
    offset += 8;
    // 4 bit faction
    // Since it is stored in a uint8 AND it with a bitmask where the first 4 bits are 1
    packedData.ior(new test_helpers_1.BN(attributes.faction).shln(offset));
    offset += 4;
    // Skip 2 bits for the flags which are 0 by default
    if (attributes.isFraud) {
        packedData.ior(new test_helpers_1.BN(1).shln(offset + 0));
    }
    if (attributes.hasDependentOp) {
        packedData.ior(new test_helpers_1.BN(1).shln(offset + 1));
    }
    offset += 2;
    if (contract.address === deployment.Heroes.address) {
        // 24 bit skinDvision
        packedData.ior(new test_helpers_1.BN(attributes.skinDivision).shln(offset));
        offset += 24;
        // 16 bit skinSlot
        packedData.ior(new test_helpers_1.BN(attributes.skinSlot).shln(offset));
        offset += 16;
        // 4 bit class
        packedData.ior(new test_helpers_1.BN(attributes.class).shln(offset));
        offset += 4;
    }
    else {
        // 8 bit shinyHue
        packedData.ior(new test_helpers_1.BN(attributes.shinyHue).shln(offset));
        offset += 8;
    }
    return packedData;
};
//# sourceMappingURL=data:application/json;base64,