/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface BoostableContract extends Truffle.Contract<BoostableInstance> {
  "new"(
    optIn: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<BoostableInstance>;
}

export interface CosBoostableLibContract
  extends Truffle.Contract<CosBoostableLibInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CosBoostableLibInstance>;
}

export interface CosTokenContract extends Truffle.Contract<CosTokenInstance> {
  "new"(
    name: string,
    symbol: string,
    optIn: string | BigNumber,
    prps: string | BigNumber,
    dubi: string | BigNumber,
    hodl: string | BigNumber,
    externalAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<CosTokenInstance>;
}

export interface DummyERC721Contract
  extends Truffle.Contract<DummyERC721Instance> {
  "new"(
    name: string,
    symbol: string,
    optIn: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<DummyERC721Instance>;
}

export interface DummyERC721ReceiverContract
  extends Truffle.Contract<DummyERC721ReceiverInstance> {
  "new"(
    retval: string | BigNumber,
    reverts: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<DummyERC721ReceiverInstance>;
}

export interface EIP712BoostableContract
  extends Truffle.Contract<EIP712BoostableInstance> {
  "new"(
    optIn: string | BigNumber,
    domainSeparator: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<EIP712BoostableInstance>;
}

export interface ERC165Contract extends Truffle.Contract<ERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC165Instance>;
}

export interface ERC721Contract extends Truffle.Contract<ERC721Instance> {
  "new"(
    name: string,
    symbol: string,
    optIn: string | BigNumber,
    prps: string | BigNumber,
    dubi: string | BigNumber,
    hodl: string | BigNumber,
    externalAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC721Instance>;
}

export interface HeroesContract extends Truffle.Contract<HeroesInstance> {
  "new"(
    optIn: string | BigNumber,
    prps: string | BigNumber,
    dubi: string | BigNumber,
    hodl: string | BigNumber,
    pets: string | BigNumber,
    externalAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<HeroesInstance>;
}

export interface IBoostableERC20Contract
  extends Truffle.Contract<IBoostableERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IBoostableERC20Instance>;
}

export interface IERC165Contract extends Truffle.Contract<IERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC165Instance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface IERC721Contract extends Truffle.Contract<IERC721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721Instance>;
}

export interface IERC721ReceiverContract
  extends Truffle.Contract<IERC721ReceiverInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721ReceiverInstance>;
}

export interface IOptInContract extends Truffle.Contract<IOptInInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IOptInInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface PetsContract extends Truffle.Contract<PetsInstance> {
  "new"(
    optIn: string | BigNumber,
    prps: string | BigNumber,
    dubi: string | BigNumber,
    hodl: string | BigNumber,
    heroes: string | BigNumber,
    externalAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<PetsInstance>;
}

export interface ProtectedBoostableContract
  extends Truffle.Contract<ProtectedBoostableInstance> {
  "new"(
    optIn: string | BigNumber,
    domainSeparator: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<ProtectedBoostableInstance>;
}

export interface ProtectedBoostableLibContract
  extends Truffle.Contract<ProtectedBoostableLibInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ProtectedBoostableLibInstance>;
}

export interface BoostableInstance extends Truffle.ContractInstance {
  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;
}

export interface CosBoostableLibInstance extends Truffle.ContractInstance {
  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    domainSeparator: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;
}

export interface CosTokenInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  batchMint: {
    (
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedEmpower: {
    (
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedEmpowerBatch: {
    (
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedKill: {
    (
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedKillBatch: {
    (
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedMerge: {
    (
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedMergeBatch: {
    (
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  empower: {
    (
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCollectibleData(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    headIdAlias: BigNumber;
    empoweredDUBI: BigNumber;
    season: BigNumber;
    abilities: BigNumber;
    stars: BigNumber;
    level: BigNumber;
    faction: BigNumber;
    isFraud: boolean;
    hasDependentOp: boolean;
    skinDivision: BigNumber;
    skinSlot: BigNumber;
    class: BigNumber;
    shinyHue: BigNumber;
  }>;

  getCollectibleExtraAttribute(
    tokenId: number | BigNumber | string,
    key: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  kill: {
    (
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  merge: {
    (
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertPendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  secondaryMinter(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setExtraAttribute: {
    (
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFraudulent: {
    (
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSecondaryMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DummyERC721Instance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  exists(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mint: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DummyERC721ReceiverInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface EIP712BoostableInstance extends Truffle.ContractInstance {
  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ERC165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ERC721Instance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface HeroesInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  batchMint: {
    (
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedEmpower: {
    (
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedEmpowerBatch: {
    (
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedKill: {
    (
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedKillBatch: {
    (
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedMerge: {
    (
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedMergeBatch: {
    (
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  empower: {
    (
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCollectibleData(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    headIdAlias: BigNumber;
    empoweredDUBI: BigNumber;
    season: BigNumber;
    abilities: BigNumber;
    stars: BigNumber;
    level: BigNumber;
    faction: BigNumber;
    isFraud: boolean;
    hasDependentOp: boolean;
    skinDivision: BigNumber;
    skinSlot: BigNumber;
    class: BigNumber;
    shinyHue: BigNumber;
  }>;

  getCollectibleExtraAttribute(
    tokenId: number | BigNumber | string,
    key: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  kill: {
    (
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  merge: {
    (
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertPendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  secondaryMinter(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setExtraAttribute: {
    (
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFraudulent: {
    (
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSecondaryMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IBoostableERC20Instance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedTransferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFuel: {
    (
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IERC20Instance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721Instance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721ReceiverInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IOptInInstance extends Truffle.ContractInstance {
  getOptInStatus(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    isOptedIn: boolean;
    permaBoostActive: boolean;
    optedInTo: string;
    optOutPeriod: BigNumber;
  }>;

  getOptInStatusPair(
    accountA: string | BigNumber,
    accountB: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string;
        optOutPeriod: BigNumber;
      },
      {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string;
        optOutPeriod: BigNumber;
      }
    ]
  >;

  isOptedInBy(
    _sender: string | BigNumber,
    _account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, BigNumber]>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface OwnableInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PetsInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  batchMint: {
    (
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      packedTokenIds: (number | BigNumber | string)[],
      tokenOwners: (string | BigNumber)[],
      packedDatas: (number | BigNumber | string)[],
      extraKeysArr: (string | BigNumber)[][],
      extraValuesArr: (string | BigNumber)[][],
      headIds: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedEmpower: {
    (
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      empower: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedEmpowerBatch: {
    (
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      empowers: {
        tag: number | BigNumber | string;
        funder: string | BigNumber;
        tokenId: number | BigNumber | string;
        amount: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedKill: {
    (
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      kill: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedKillBatch: {
    (
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      kills: {
        tag: number | BigNumber | string;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedMerge: {
    (
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      merge: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedMergeBatch: {
    (
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      merges: {
        tag: number | BigNumber | string;
        tokenIdSource: number | BigNumber | string;
        tokenIdTarget: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        from: string | BigNumber;
        to: string | BigNumber;
        tokenId: number | BigNumber | string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  empower: {
    (
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCollectibleData(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    headIdAlias: BigNumber;
    empoweredDUBI: BigNumber;
    season: BigNumber;
    abilities: BigNumber;
    stars: BigNumber;
    level: BigNumber;
    faction: BigNumber;
    isFraud: boolean;
    hasDependentOp: boolean;
    skinDivision: BigNumber;
    skinSlot: BigNumber;
    class: BigNumber;
    shinyHue: BigNumber;
  }>;

  getCollectibleExtraAttribute(
    tokenId: number | BigNumber | string,
    key: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  kill: {
    (
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  merge: {
    (
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenIdSource: number | BigNumber | string,
      tokenIdTarget: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      packedTokenId: number | BigNumber | string,
      tokenOwner: string | BigNumber,
      packedData: number | BigNumber | string,
      extraKeys: (string | BigNumber)[],
      extraValues: (string | BigNumber)[],
      headId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertPendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  secondaryMinter(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setExtraAttribute: {
    (
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      key: string | BigNumber,
      value: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFraudulent: {
    (
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSecondaryMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ProtectedBoostableInstance extends Truffle.ContractInstance {
  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;
}

export interface ProtectedBoostableLibInstance
  extends Truffle.ContractInstance {
  assertCanFinalize(
    metadata: {
      opType: number | BigNumber | string;
      createdAt: number | BigNumber | string;
      booster: string | BigNumber;
    },
    optInStatus: {
      isOptedIn: boolean;
      permaBoostActive: boolean;
      optedInTo: string | BigNumber;
      optOutPeriod: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}
